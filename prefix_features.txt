
@upper = [A - Z];
@lower = [a - z];
@digit = [zero one two three four five six seven eight nine];


# Languagesystem definitions

languagesystem DFLT dflt; # Default default
languagesystem latn dflt; # Latin default
languagesystem arab dflt; # Arabic default
languagesystem bopo dflt; # Bopomofo default
languagesystem brai dflt; # Braille default
languagesystem grek dflt; # Greek default
languagesystem cyrl dflt; # Cyrillic default
languagesystem hebr dflt; # Hebrew default
languagesystem math dflt; # Mathematical Alphanumeric Symbols default
languagesystem zinh dflt;
languagesystem zyyy dflt;

# Copyright 2018-2019 kelas <me@kel.as>
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

# v0.0.64 added another tags like // BUG and # BUG
# v0.0.63 added =<= -<-
# v0.0.62 first attempt of ligature chain by Fabrizio =>=
# v0.0.61 microsecond space is optional
# v0.0.60 changed mu into mumi
# v0.0.59 added microsecond calt
# v0.0.58 merged liga into calt
# v0.0.57 cleanup
# v0.0.56 optimized triples in < block
# v0.0.55 cleanup
# v0.0.54 gpos example
# v0.0.53 ignore <--<
# v0.0.52 fixed <-->
# v0.0.51 fixed ---> ---<
# v0.0.50 fixed <===> <--->
# v0.0.49 fixed <||>
# v0.0.48 fixed =>> precedence
# v0.0.47 ignore <--> <--< <--...--< <--...-->
# v0.0.46 rolled back =< (ambiguous)
# v0.0.45 ignore =~/ and <||>
# v0.0.44 ignore <--->
# v0.0.43 added =<
# v0.0.42 added ==>>
# v0.0.41 added <<==
# v0.0.40 added <==
# v0.0.39 added <-->
# v0.0.38 added >->
# v0.0.37 added <-<
# v0.0.36 added =~=
# v0.0.35 added _|_  |-  ||-
# v0.0.34 fixed -|>
# v0.0.33 fixed :D and :P
# v0.0.32 fixed =/= precedence
# v0.0.31 fixed <|> and <|| precedence
# v0.0.30 added final missing sustitutions, reordered lookups to minimize precedence overrides
# v0.0.25 fixed ==== //// <<<< bugs
# v0.0.20 performance improvements, added tag ligatures, fixed double/triple/series subs
# v0.0.10 initial release

#############################################################
# a simple predicate used in most substitution chains.
# replaces the matched glyph with v00 if the rest of the
# chain is a match.

lookup drop_if_next_is {
    sub [exclam numbersign less percent equal underscore ampersand plus asterisk greater hyphen bar period
         slash colon question asciitilde asciicircum backslash dollar at quotedbl bracketleft bracketright D P]' by v00;
} drop_if_next_is;

#############################################################

# != !! !>
@exclam_heads = [equal exclam greater];
@exclam_tails = [exclam_equal exclam_exclam exclam_greater];

# *= */ *>
@asterisk_heads = [equal slash greater];
@asterisk_tails = [asterisk_equal asterisk_slash asterisk_greater];

# ++ += +>
@plus_heads = [plus equal greater];
@plus_tails = [plus_plus plus_equal plus_greater];

# %= %>
@percent_heads = [equal greater];
@percent_tails = [percent_equal percent_greater];

# #_ #( #[ #? #> ##
@numbersign_heads = [underscore parenleft braceleft question greater numbersign];
@numbersign_tails = [numbersign_underscore numbersign_parenleft numbersign_braceleft numbersign_question numbersign_greater numbersign_numbersign];

# && &% &* &+ &- &/ &= &>
@ampersand_heads = [ampersand percent asterisk plus hyphen slash equal greater];
@ampersand_tails = [ampersand_ampersand ampersand_percent ampersand_asterisk ampersand_plus ampersand_hyphen ampersand_slash ampersand_equal ampersand_greater];

@less_heads = [less greater dollar asterisk plus equal bar exclam at numbersign percent asciicircum ampersand question
    period slash backslash quotedbl colon asciitilde hyphen];

# << <> <$ <* <+ <= <| <! <@ <# <% <^ <& <? <. </ <\ <" <: <~ <-
@less_doubles = [less_less less_greater less_dollar less_asterisk less_plus less_equal less_bar less_exclam less_at less_numbersign
    less_percent less_asciicircum less_ampersand less_question less_period less_slash less_backslash less_quotedbl less_colon
    less_asciitilde less_hyphen];

# <$> <*> <+> <=> <|> <!> <@> <#> <%> <^> <&> <?> <.> </> ..... <==
@less_triples = [less_dollar_greater less_asterisk_greater less_plus_greater less_equal_greater less_bar_greater
    less_exclam_greater less_at_greater less_numbersign_greater less_percent_greater less_asciicircum_greater
    less_ampersand_greater less_question_greater less_period_greater less_slash_greater less_backslash_greater
    less_quotedbl_greater less_colon_greater less_asciitilde_greater less_hyphen_greater less_less_less less_less_equal
    less_less_hyphen less_less_asciitilde less_less_asciicircum less_less_bar less_equal_less less_asciitilde_asciitilde
    less_hyphen_hyphen less_bar_hyphen less_bar_bar less_hyphen_less less_equal_equal];

# -- -< -> -=
@hyphen_heads =   [hyphen less greater equal];
@hyphen_doubles = [hyphen_hyphen hyphen_less hyphen_greater hyphen_equal];
@hyphen_triples = [hyphen_bar_greater hyphen_hyphen_greater hyphen_hyphen_hyphen hyphen_less_bar hyphen_less_less hyphen_greater_greater hyphen_greater_hyphen];

# .. .> .~ .=
@period_heads = [period greater asciitilde equal];
@period_tails = [period_period period_greater period_asciitilde period_equal];

# /* // /> /=
@slash_heads = [asterisk slash greater equal];
@slash_tails = [slash_asterisk slash_slash slash_greater slash_equal];

# :: := :â‰¡ :> :( :) :3 :D :P :/ :\
@colon_heads = [colon equal equivalence greater parenleft parenright three D P slash backslash];
@colon_tails = [colon_colon colon_equal colon_equivalence colon_greater colon_parenleft colon_parenright colon_three colon_D colon_P colon_slash colon_backslash];

# == => =~
@equal_heads = [equal greater asciitilde];
@equal_tails = [equal_equal equal_greater equal_asciitilde];

# >- >= >>
@greater_heads = [hyphen equal greater];
@greater_tails = [greater_hyphen greater_equal greater_greater];

# ?? ?~ ?= ?> ?.
@question_heads = [question asciitilde equal greater period];
@question_tails = [question_question question_asciitilde question_equal question_greater question_period];

# |= || |> |-
@bar_heads = [equal bar greater hyphen];
@bar_tails = [bar_equal bar_bar bar_greater bar_hyphen];

# ~= ~>
@asciitilde_heads = [equal greater];
@asciitilde_tails = [asciitilde_equal asciitilde_greater];

# ^= ^.  ^?  ^>
@asciicircum_heads = [equal period question greater];
@asciicircum_tails = [asciicircum_equal asciicircum_period asciicircum_question asciicircum_greater];

# \\ \>
@backslash_heads = [backslash greater];
@backslash_tails = [backslash_backslash backslash_greater];

#############################################################

lookup clig_exclam_tail_eq_le_excl {
    sub [equal less exclam] by [exclam_equal_equal exclam_equal_less exclam_exclam_exclam]; # !== !=< !!!
} clig_exclam_tail_eq_le_excl;

lookup clig_numbersign_tail_parenleft {
    sub parenleft by numbersign_underscore_parenleft; # #_(
} clig_numbersign_tail_parenleft;

lookup clig_ampersand_tail_amp_amp {
    sub ampersand by ampersand_ampersand_amp;  # &&&
} clig_ampersand_tail_amp_amp;

lookup clig_asterisk_tail_asterisk {
    sub asterisk by asterisk_asterisk_asterisk; # ***
} clig_asterisk_tail_asterisk;

lookup clig_plus_tail_plus_or_eq {
    sub [plus equal] by [plus_plus_plus plus_plus_equal]; # +++ ++=
} clig_plus_tail_plus_or_eq;

lookup clig_percent_tail_less_percent {
    sub percent by percent_less_percent; # %<%
} clig_percent_tail_less_percent;

lookup clig_percent_tail_greater_percent {
    sub percent by percent_greater_percent; # %>%
} clig_percent_tail_greater_percent;

lookup clig_hyphen_tail_bar_greater {
    sub greater by hyphen_bar_greater; # -|>
} clig_hyphen_tail_bar_greater;

lookup clig_hyphen_tail_less_less {
    sub less by hyphen_less_less; # -<<
} clig_hyphen_tail_less_less;

lookup clig_hyphen_tail_plus_hyphen {
    sub hyphen by hyphen_plus_hyphen; # -+-
} clig_hyphen_tail_plus_hyphen;

lookup clig_equal_tail_greater_equal {
    sub equal by equal_greater_equal; # =>=
} clig_equal_tail_greater_equal;

lookup clig_equal_tail_less_equal {
    sub equal by equal_less_equal; # =<=
} clig_equal_tail_less_equal;

lookup clig_hyphen_tail_greater_hyphen {
    sub hyphen by hyphen_greater_hyphen; # ->-
} clig_hyphen_tail_greater_hyphen;

lookup clig_hyphen_tail_less_hyphen {
    sub hyphen by hyphen_less_hyphen; # -<-
} clig_hyphen_tail_less_hyphen;

lookup clig_period_tail_period_less {
    sub [period less] by [period_period_period period_period_less]; # ... ..<
} clig_period_tail_period_less;

lookup clig_greater_tail_greater_greater {
    sub [greater hyphen equal asciicircum bar] by
        [greater_greater_greater greater_greater_hyphen greater_greater_equal greater_greater_asciicircum greater_greater_bar]; # >>> >>- >>= >>^ >>|
} clig_greater_tail_greater_greater;

lookup clig_colon_tail_smilies {
    sub [parenleft parenright] by [colon_hyphen_parenleft colon_hyphen_parenright]; # :-( :-)
} clig_colon_tail_smilies;

lookup clig_colon_tail_greater_colon {
    sub [greater colon] by [colon_equal_greater colon_less_colon]; # :=> :<:
} clig_colon_tail_greater_colon;

lookup clig_colon_tail_gt {
    sub colon by colon_greater_colon; # :>:
} clig_colon_tail_gt;

lookup clig_colon_tail_col_col {
    sub colon by colon_colon_colon; # :::
} clig_colon_tail_col_col;

lookup clig_equal_tail_equal_greater {
    sub [equal greater] by [equal_equal_equal equal_equal_greater]; # === ==>
} clig_equal_tail_equal_greater;

lookup clig_equal_tail_eq_le_gt {
    sub [equal less greater] by [equal_slash_equal equal_less_less equal_greater_greater]; # =/= =<< =>>
} clig_equal_tail_eq_le_gt;

lookup clig_equal_tail_tilde_equal {
    sub equal by equal_asciitilde_equal; # =~=
} clig_equal_tail_tilde_equal;

lookup clig_bar_tail_bar_greater_hyphen {
    sub [bar greater hyphen] by [bar_bar_bar bar_bar_greater bar_bar_hyphen]; # ||| ||> ||-
} clig_bar_tail_bar_greater_hyphen;

lookup clig_bar_tail_greater_hyphen {
    sub [greater hyphen] by [bar_greater_greater bar_greater_hyphen]; # |>> |>-
} clig_bar_tail_greater_hyphen;

lookup clig_bar_tail_bar_less {
    sub [bar less] by [bar_plus_bar bar_less_less]; # |+| |<<
} clig_bar_tail_bar_less;

lookup clig_bar_tail_hyphen_greater {
    sub greater by bar_hyphen_greater; # |->
} clig_bar_tail_hyphen_greater;

lookup clig_bar_tail_equal_greater {
    sub greater by bar_equal_greater; # |=>
} clig_bar_tail_equal_greater;

lookup clig_bar_long_tail_hyphen_greater {
    sub greater by bar_hyphen_hyphen_greater; # |-->
} clig_bar_long_tail_hyphen_greater;

lookup clig_bar_long_tail_equal_greater {
    sub greater by bar_equal_equal_greater; # |==>
} clig_bar_long_tail_equal_greater;

lookup clig_asciicircum_tail_le_gt_pt {
    sub [less greater period] by
      [asciicircum_less_less asciicircum_greater_greater asciicircum_period_period]; # ^<< ^>> ^..
} clig_asciicircum_tail_le_gt_pt;

lookup clig_greater_tail_eq_gt {
    sub [greater equal] by [greater_equal_greater greater_exclam_equal]; # >=> >!=
} clig_greater_tail_eq_gt;

lookup clig_greater_tail_hyphen_gt {
    sub greater by greater_hyphen_greater; # >->
} clig_greater_tail_hyphen_gt;

lookup clig_asciitilde_tail_gt {
    sub greater by asciitilde_asciitilde_greater; # ~~>
} clig_asciitilde_tail_gt;

lookup clig_asciitilde_tail_gt_gt {
    sub greater by asciitilde_greater_greater;  # ~>>
} clig_asciitilde_tail_gt_gt;

lookup clig_question_tail_que_que {
    sub question by question_question_question; # ???
} clig_question_tail_que_que;

lookup clig_hyphen_tail_backsl_slash {
    sub slash by hyphen_backslash_slash; # -\/
} clig_hyphen_tail_backsl_slash;

lookup clig_backslash_tail_slash_hyphen {
    sub hyphen by backslash_slash_hyphen; # \/-
} clig_backslash_tail_slash_hyphen;

lookup clig_equivalence_tail_colon_equiv {
    sub equivalence by equivalence_colon_equivalence;
} clig_equivalence_tail_colon_equiv;

lookup clig_equivalence_tail_equiv_equiv {
    sub equivalence by equiv_equiv_equiv;
} clig_equivalence_tail_equiv_equiv;

lookup clig_underscore_tail_bar_underscore {
	sub underscore by underscore_bar_underscore; # _|_
} clig_underscore_tail_bar_underscore;

############################################################

lookup clig_tail_dollar_gt      { sub greater by dollar_greater; } clig_tail_dollar_gt;
lookup clig_tail_at_gt          { sub greater by at_greater; } clig_tail_at_gt;
lookup clig_tail_quot_gt        { sub greater by quotedbl_greater; } clig_tail_quot_gt;

#############################################################

lookup clig_exclam_tails {
    sub @exclam_heads' by @exclam_tails; # != !! !>
} clig_exclam_tails;

lookup clig_numbersign_tails {
    sub @numbersign_heads' by @numbersign_tails; # #_  #(  #{  #?  #>
} clig_numbersign_tails;

lookup clig_ampersand_tails {
    sub @ampersand_heads' by @ampersand_tails; # &% && &* &+ &- &/ &= &>
} clig_ampersand_tails;

lookup clig_percent_tails {
    sub greater' lookup drop_if_next_is percent' lookup clig_percent_tail_greater_percent; # %>%
    sub @percent_heads' by @percent_tails; # %= %>
} clig_percent_tails;

lookup clig_asterisk_tails {
    sub @asterisk_heads' by @asterisk_tails;
} clig_asterisk_tails;

lookup clig_plus_tails {
    sub @plus_heads' by @plus_tails;
} clig_plus_tails;

lookup clig_slash_tails_final {
    sub [slash equal asterisk]
        by [slash_slash_slash slash_equal_equal slash_asterisk_asterisk]; # /// /== /**
} clig_slash_tails_final;

lookup clig_slash_tails_3 {
    sub slash_slash slash' lookup clig_slash_tails_final;
    sub slash_equal equal' lookup clig_slash_tails_final;
    sub slash_asterisk asterisk' lookup clig_slash_tails_final;
} clig_slash_tails_3;

lookup clig_period_tails {
    sub @period_heads' by @period_tails;
} clig_period_tails;

lookup clig_slash_tails {
    sub @slash_heads' by @slash_tails;
} clig_slash_tails;

lookup clig_colon_tails {
    sub @colon_heads' by @colon_tails;
} clig_colon_tails;

lookup clig_equal_tails {
    sub @equal_heads' by @equal_tails;
} clig_equal_tails;

lookup clig_greater_tails {
    sub @greater_heads' by @greater_tails;
} clig_greater_tails;

lookup clig_question_tails {
    sub @question_heads' by @question_tails;
} clig_question_tails;

lookup clig_bar_tails {
    sub @bar_heads' by @bar_tails;
} clig_bar_tails;

lookup clig_asciitilde_tails {
    sub @asciitilde_heads' by @asciitilde_tails;
} clig_asciitilde_tails;

lookup clig_asciicircum_tails {
    sub @asciicircum_heads' by @asciicircum_tails;
} clig_asciicircum_tails;

lookup clig_backslash_tails {
    sub @backslash_heads' by @backslash_tails;
} clig_backslash_tails;

lookup clig_equivalence_tails {
    sub equivalence by equivalence_equivalence;
} clig_equivalence_tails;

#############################################################

lookup clig_less_long_tails_hyp_gt {
    sub [hyphen greater]' by [less_exclam_hyphen_hyphen less_asterisk_asterisk_greater]; # <!--  <**>
} clig_less_long_tails_hyp_gt;

lookup clig_less_long_tails_hyphen_gt {
    sub greater by less_hyphen_hyphen_greater; # <-->
} clig_less_long_tails_hyphen_gt;

lookup clig_less_long_tails_eq_gt {
    sub greater by less_equal_equal_greater; # <==>
} clig_less_long_tails_eq_gt;

lookup clig_less_tail_tilde_less {
    sub less by less_asciitilde_less; # <~<
} clig_less_tail_tilde_less;

lookup clig_less_long_less_eq_eq {
    sub equal by less_less_equal_equal; # <<==
} clig_less_long_less_eq_eq;

lookup clig_less_tails_2 {
    # << <> <$ <* <+ <= <| <! <@ <# <% <^ <& <? <. </ <\ <" <: <~ <-
    sub @less_heads by @less_doubles;
} clig_less_tails_2;

#@less_doubles_end_greater = [less_dollar less_asterisk less_plus less_bar less_exclam less_at less_numbersign less_percent less_asciicircum less_ampersand less_question less_period less_slash less_backslash less_quotedbl less_colon less_asciitilde];
#@less_triples_end_greater = [less_dollar_greater less_asterisk_greater less_plus_greater less_bar_greater less_exclam_greater less_at_greater less_numbersign_greater less_percent_greater less_asciicircum_greater less_ampersand_greater less_question_greater less_period_greater less_slash_greater less_backslash_greater less_quotedbl_greater less_colon_greater less_asciitilde_greater];

#lookup clig_less_tails_greater_2_to_3 {
#    sub @less_doubles_end_greater by @less_triples_end_greater;
#} clig_less_tails_greater_2_to_3;

lookup clig_less_tails_3 {
    #rsub greater @less_doubles_end_greater' lookup clig_less_tails_greater_2_to_3;
    #sub @less_doubles_end_greater' by @less_triples_end_greater;

    # <$>  <*>  <+>  <!>  <@>  <#>  <%>  <^>  <&>  <?>  <.>  </>  <\>  <">  <:>
    sub less_dollar greater' by less_dollar_greater;
    sub less_asterisk greater' by less_asterisk_greater;
    sub less_plus greater' by less_plus_greater;
    sub less_exclam greater' by less_exclam_greater;
    sub less_at greater' by less_at_greater;
    sub less_numbersign greater' by less_numbersign_greater;
    sub less_percent greater' by less_percent_greater;
    sub less_asciicircum greater' by less_asciicircum_greater;
    sub less_ampersand greater' by less_ampersand_greater;
    sub less_question greater' by less_question_greater;
    sub less_period greater' by less_period_greater;
    sub less_slash greater' by less_slash_greater;
    sub less_backslash greater' by less_backslash_greater;
    sub less_quotedbl greater' by less_quotedbl_greater;
    sub less_colon greater' by less_colon_greater;

    # <==  <=<  <=>
    sub less_equal [equal less greater]' by [less_equal_equal less_equal_less less_equal_greater];

    # <-<  <--  <->
    sub less_hyphen [less hyphen greater]' by [less_hyphen_less less_hyphen_hyphen less_hyphen_greater];

    # <<<  <<=  <<-  <<~  <<^  <<|
    sub less_less [less equal hyphen asciitilde asciicircum bar]' by
        [less_less_less less_less_equal less_less_hyphen less_less_asciitilde less_less_asciicircum less_less_bar];

    # <~~  <~>
    sub less_asciitilde [asciitilde greater]' by [less_asciitilde_asciitilde less_asciitilde_greater];

    # <|-  <||  <|>
    sub less_bar [hyphen bar greater]' by [less_bar_hyphen less_bar_bar less_bar_greater];

} clig_less_tails_3;

lookup clig_hyphen_tails {
    sub @hyphen_heads by @hyphen_doubles;
} clig_hyphen_tails;

lookup clig_hyphen_tails_3 {
    sub hyphen_hyphen [greater hyphen]' by [hyphen_hyphen_greater hyphen_hyphen_hyphen]; # --> ---
    sub hyphen_less bar' by hyphen_less_bar; # -<|
    sub hyphen_greater greater' by hyphen_greater_greater; # ->>
} clig_hyphen_tails_3;

#############################################################

lookup clig_bar {
    ignore sub bar bar bar bar; # four pipes in a row are no-op
    ignore sub bar bar' bar; # further pipes are no-op
    ignore sub hyphen bar' greater; # precedence exception -|>
    ignore sub less bar' bar greater; # disable <||>
    ignore sub less bar' [greater hyphen bar] ; # precedence <|> <|- <||
    sub bar'            lookup drop_if_next_is hyphen'              lookup drop_if_next_is hyphen' lookup drop_if_next_is greater'  lookup clig_bar_long_tail_hyphen_greater; # |-->
    sub bar'            lookup drop_if_next_is equal'               lookup drop_if_next_is equal'  lookup drop_if_next_is greater' lookup clig_bar_long_tail_equal_greater; # |==>
    sub bar'            lookup drop_if_next_is hyphen'              lookup drop_if_next_is greater' lookup clig_bar_tail_hyphen_greater; # |->
    sub bar'            lookup drop_if_next_is equal'               lookup drop_if_next_is greater' lookup clig_bar_tail_equal_greater; # |=>
    sub bar'            lookup drop_if_next_is bar'                 lookup drop_if_next_is [bar greater hyphen]' lookup clig_bar_tail_bar_greater_hyphen; # |||  ||>
    sub bar'            lookup drop_if_next_is greater'             lookup drop_if_next_is [greater hyphen]' lookup clig_bar_tail_greater_hyphen; # |>> |>-
    sub bar'            lookup drop_if_next_is plus'                lookup drop_if_next_is bar' lookup clig_bar_tail_bar_less;  #        |+|
    sub bar'            lookup drop_if_next_is less'                lookup drop_if_next_is less' lookup clig_bar_tail_bar_less; #        |<<
    sub bar'            lookup drop_if_next_is @bar_heads'          lookup clig_bar_tails;          #                                    |= || |>
} clig_bar;

lookup clig_less {
    ignore sub less less less less; # four lesses in a row are no-op
    ignore sub less less' less; # further lesses are no-op
    ignore sub [hyphen equal] less' less; # precedence exception -<< =<<
    ignore sub hyphen less' bar; # precedence exception -<|
    ignore sub hyphen less' hyphen; # precedence exception -<-
    ignore sub less' hyphen hyphen less; # disable <--<
    ignore sub less' hyphen hyphen hyphen; # disable <---  <---< <--->
    ignore sub less' equal equal equal; # disable <===
    ignore sub equal less' equal; # precedence exception =<=
    sub less' lookup drop_if_next_is asciitilde' lookup drop_if_next_is less' lookup clig_less_tail_tilde_less; #  <~<
    sub less' lookup drop_if_next_is exclam' lookup drop_if_next_is hyphen' lookup drop_if_next_is hyphen' lookup clig_less_long_tails_hyp_gt; # <!--
    sub less' lookup drop_if_next_is asterisk' lookup drop_if_next_is asterisk' lookup drop_if_next_is greater' lookup clig_less_long_tails_hyp_gt; # <**>
    sub less' lookup drop_if_next_is hyphen' lookup drop_if_next_is hyphen' lookup drop_if_next_is greater' lookup clig_less_long_tails_hyphen_gt; # <-->
    sub less' lookup drop_if_next_is equal' lookup drop_if_next_is equal' lookup drop_if_next_is greater' lookup clig_less_long_tails_eq_gt; # <==>
    sub less' lookup drop_if_next_is less' lookup drop_if_next_is equal' lookup drop_if_next_is equal' lookup clig_less_long_less_eq_eq; # <<==
    sub less' lookup drop_if_next_is @less_heads' lookup clig_less_tails_2;
    sub v00 @less_doubles [hyphen asterisk greater less equal asciitilde asciicircum bar]' lookup clig_less_tails_3;
} clig_less;

lookup clig_slash {
    ignore sub slash slash slash slash; # four slashes in a row are no-op
    ignore sub slash slash' slash; # further slashes are no-op
    ignore sub equal slash' equal; # precedence exception =/
    ignore sub hyphen less' bar; # precedence exception -<|
    sub slash'          lookup drop_if_next_is @slash_heads'        lookup clig_slash_tails; # /* // /> /=
    sub v00 [slash_slash slash_equal slash_asterisk] [slash equal asterisk]' lookup clig_slash_tails_3; #  ///  /==  /**
} clig_slash;

lookup clig_hyphen {
    ignore sub hyphen hyphen hyphen hyphen; # four hyphens in a row are no-op
    ignore sub hyphen hyphen' hyphen; # further hyphens are no-op
    #ignore sub less exclam hyphen' hyphen'; # precedence exception
    #ignore sub less hyphen' [hyphen greater]'; # precedence exception
    ignore sub greater hyphen' greater; # precedence exception >->
    ignore sub less hyphen hyphen hyphen' [greater less]; # disable <---> <---<
    ignore sub less hyphen' hyphen hyphen [greater less]; # disable <---> <---<
    ignore sub less hyphen' hyphen [greater less]; # disable <--> <--<
    ignore sub less hyphen hyphen' [greater less]; # disable <--> <--<
    ignore sub hyphen hyphen hyphen' [greater less]; # disable --------< --------->
    ignore sub hyphen' hyphen hyphen [greater less]; # disable --------< --------->

    sub hyphen' lookup drop_if_next_is backslash' lookup drop_if_next_is slash' lookup clig_hyphen_tail_backsl_slash; #  -\/
    sub hyphen' lookup drop_if_next_is plus' lookup drop_if_next_is hyphen' lookup clig_hyphen_tail_plus_hyphen; #  -+-
    sub hyphen' lookup drop_if_next_is greater' lookup drop_if_next_is hyphen' lookup clig_hyphen_tail_greater_hyphen; #  ->-
    sub hyphen' lookup drop_if_next_is less' lookup drop_if_next_is hyphen' lookup clig_hyphen_tail_less_hyphen; #  -<-
    sub hyphen' lookup drop_if_next_is less' lookup drop_if_next_is less' lookup clig_hyphen_tail_less_less;#   -<<
    sub hyphen' lookup drop_if_next_is bar' lookup drop_if_next_is greater' lookup clig_hyphen_tail_bar_greater; # -|>
    sub hyphen' lookup drop_if_next_is @hyphen_heads' lookup clig_hyphen_tails;    # -- -< -= ->
    sub v00 @hyphen_doubles [greater less hyphen bar]' lookup clig_hyphen_tails_3;  # --> -|> -<| ---  ->>
} clig_hyphen;

lookup clig_equivalence {
    ignore sub equivalence equivalence equivalence equivalence;
    ignore sub equivalence equivalence' equivalence;
    sub equivalence'     lookup drop_if_next_is colon'               lookup drop_if_next_is equivalence' lookup clig_equivalence_tail_colon_equiv; #    â‰¡:â‰¡
    sub equivalence'     lookup drop_if_next_is equivalence'         lookup drop_if_next_is equivalence' lookup clig_equivalence_tail_equiv_equiv; #    â‰¡â‰¡â‰¡
    sub equivalence'     lookup drop_if_next_is equivalence'         lookup clig_equivalence_tails;          #                             â‰¡â‰¡
} clig_equivalence;

lookup clig_colon {
    ignore sub colon colon colon colon; # four cols in a row are no-op
    ignore sub colon colon' colon; # further cols are no-op
    #ignore sub equivalence colon' equivalence; # precedence exception â‰¡:â‰¡
    sub colon'          lookup drop_if_next_is hyphen'              lookup drop_if_next_is [parenleft parenright]' lookup clig_colon_tail_smilies; # :-)  :-(
    sub colon'          lookup drop_if_next_is equal'               lookup drop_if_next_is greater' lookup clig_colon_tail_greater_colon; # :=>
    sub colon'          lookup drop_if_next_is less'                lookup drop_if_next_is colon' lookup clig_colon_tail_greater_colon; # :<:
    sub colon'          lookup drop_if_next_is greater'             lookup drop_if_next_is colon' lookup clig_colon_tail_gt; #            :::
    sub colon'          lookup drop_if_next_is colon'               lookup drop_if_next_is colon' lookup clig_colon_tail_col_col; #       :>:
    sub colon'          lookup drop_if_next_is @colon_heads'        lookup clig_colon_tails;        #                                     :: := :â‰¡ :> :( :) :3 :D :P
} clig_colon;

lookup clig_exclam {
    ignore sub exclam exclam exclam exclam; # four bangs in a row are no-op
    ignore sub exclam exclam' exclam; # further bangs are no-op
    ignore sub greater exclam' equal; # precedence exception >!=
    sub exclam'           lookup drop_if_next_is exclam'             lookup drop_if_next_is exclam' lookup clig_exclam_tail_eq_le_excl; # !!!
    sub exclam'           lookup drop_if_next_is equal'              lookup drop_if_next_is [equal less]' lookup clig_exclam_tail_eq_le_excl; # !== !=<
    sub exclam'           lookup drop_if_next_is @exclam_heads'      lookup clig_exclam_tails; # != !! !>
} clig_exclam;

lookup clig_plus {
    ignore sub plus plus plus plus; # four pluses in a row are no-op
    ignore sub plus plus' plus; # further pluses are no-op
    sub plus'             lookup drop_if_next_is plus'               lookup drop_if_next_is [plus equal]' lookup clig_plus_tail_plus_or_eq; # +++
    sub plus'             lookup drop_if_next_is @plus_heads'        lookup clig_plus_tails; # ++ += +>
} clig_plus;

lookup clig_ampersand {
    ignore sub ampersand ampersand ampersand ampersand; # four amps in a row are no-op
    ignore sub ampersand ampersand' ampersand; # further amps are no-op
    sub ampersand'        lookup drop_if_next_is ampersand'           lookup drop_if_next_is ampersand' lookup clig_ampersand_tail_amp_amp; # &&&
    sub ampersand'        lookup drop_if_next_is @ampersand_heads'    lookup clig_ampersand_tails; # &% && &* &+ &- &/ &= &>
} clig_ampersand;

lookup clig_greater {
    ignore sub greater greater greater greater; # four gt's in a row are no-op
    ignore sub [asciitilde greater] greater' greater; # further gt's are no-op, precedence exception ~>>
    #ignore sub bar greater' [greater hyphen]; # precedence exceptions |>> |>-
    ignore sub equal greater' greater; # precedence exception ==>> =>>
    ignore sub equal greater' equal; # precedence exception =>=
    sub greater'        lookup drop_if_next_is greater'             lookup drop_if_next_is [hyphen equal greater asciicircum bar]' lookup clig_greater_tail_greater_greater; # >>>  >>-  >>=  >>^ >>|
    sub greater'        lookup drop_if_next_is hyphen'              lookup drop_if_next_is greater' lookup clig_greater_tail_hyphen_gt; #    >->
    sub greater'        lookup drop_if_next_is equal'               lookup drop_if_next_is greater' lookup clig_greater_tail_eq_gt; #    >=>
    sub greater'        lookup drop_if_next_is exclam'              lookup drop_if_next_is equal' lookup clig_greater_tail_eq_gt; #      >!=
    sub greater'        lookup drop_if_next_is @greater_heads'      lookup clig_greater_tails;      #                                    >- >= >>
} clig_greater;

lookup clig_asterisk {
    ignore sub asterisk asterisk asterisk asterisk; # four asts in a row are no-op
    ignore sub asterisk asterisk' asterisk; # further asts are no-op
    sub asterisk'       lookup drop_if_next_is asterisk'            lookup drop_if_next_is asterisk' lookup clig_asterisk_tail_asterisk; # ***
    sub asterisk'       lookup drop_if_next_is @asterisk_heads'     lookup clig_asterisk_tails;     #                                    *= */  *>
} clig_asterisk;

lookup clig_period {
    ignore sub period period period period; # four dots in a row are no-op
    ignore sub period period' period; # further dots are no-op
    sub period'         lookup drop_if_next_is period'              lookup drop_if_next_is [period less]' lookup clig_period_tail_period_less; # ... ..<
    sub period'         lookup drop_if_next_is @period_heads'       lookup clig_period_tails;       #                                    .. .> .~ .=
} clig_period;

lookup clig_question {
    ignore sub question question question question; # four asks in a row are no-op
    ignore sub question question' question; # further asks are no-op
    sub question'       lookup drop_if_next_is question'            lookup drop_if_next_is question' lookup clig_question_tail_que_que;# ???
    sub question'       lookup drop_if_next_is @question_heads'     lookup clig_question_tails;     #                                    ?? ?~ ?= ?> ?.
} clig_question;

lookup clig_backslash {
    ignore sub backslash backslash backslash;
    ignore sub backslash backslash' backslash;
    sub backslash'      lookup drop_if_next_is slash' lookup drop_if_next_is hyphen' lookup clig_backslash_tail_slash_hyphen; #  \/-
    sub backslash'      lookup drop_if_next_is @backslash_heads'    lookup clig_backslash_tails;    #                                    \\ \>
} clig_backslash;

lookup clig_percent {
    sub percent'        lookup drop_if_next_is less'                lookup drop_if_next_is percent' lookup clig_percent_tail_less_percent; # %<%
    sub percent'        lookup drop_if_next_is @percent_heads'      lookup clig_percent_tails;      # %>%                                %= %>
} clig_percent;

lookup clig_asciicircum {
    sub asciicircum'    lookup drop_if_next_is less'                lookup drop_if_next_is less'    lookup clig_asciicircum_tail_le_gt_pt; # ^<<
    sub asciicircum'    lookup drop_if_next_is greater'             lookup drop_if_next_is greater' lookup clig_asciicircum_tail_le_gt_pt; # ^>>
    sub asciicircum'    lookup drop_if_next_is period'              lookup drop_if_next_is period'  lookup clig_asciicircum_tail_le_gt_pt; # ^..
    sub asciicircum'    lookup drop_if_next_is @asciicircum_heads'  lookup clig_asciicircum_tails;  #                                    ^= ^. ^?  ^>
} clig_asciicircum;

lookup clig_dollar {
    sub dollar'         lookup drop_if_next_is greater'             lookup clig_tail_dollar_gt;     #                                    %>
} clig_dollar;

lookup clig_at {
    sub at'             lookup drop_if_next_is greater'             lookup clig_tail_at_gt;         #                                    @>
} clig_at;

lookup clig_quotedbl {
    sub quotedbl'       lookup drop_if_next_is greater'             lookup clig_tail_quot_gt;       #                                    ">
} clig_quotedbl;

lookup clig_numbersign {
    ignore sub numbersign numbersign numbersign;
    ignore sub numbersign numbersign' numbersign;
    sub numbersign'     lookup drop_if_next_is underscore'          lookup drop_if_next_is parenleft' lookup clig_numbersign_tail_parenleft; # #_(
    sub numbersign'     lookup drop_if_next_is @numbersign_heads'   lookup clig_numbersign_tails;   # #_(                                #_  #(  #{  #?  #>
} clig_numbersign;

lookup clig_equal_tail_eq_gt_gt {
    sub greater by equal_equal_greater_greater;
} clig_equal_tail_eq_gt_gt;

lookup clig_equal {
    ignore sub equal equal equal equal; # four eq's in a row are no-op
    ignore sub equal equal' equal; # further eq's are no-op
    #ignore sub colon equal' greater; # precedence exception :=>
    #ignore sub exclam equal' equal; # precedence exception !==
    #ignore sub greater equal' greater; # precedence exception >=>
    #ignore sub bar equal' greater; #precedence exception |=>
    ignore sub equal' asciitilde slash; # disable =~/
    ignore sub less equal' equal equal; # disable <===
    ignore sub less equal equal' equal; # disable <===
    ignore sub less equal equal equal' greater; # disable <===>
    sub equal'          lookup drop_if_next_is greater'             lookup drop_if_next_is greater' lookup clig_equal_tail_eq_le_gt; #   =>>
    sub equal'          lookup drop_if_next_is equal'               lookup drop_if_next_is greater' lookup drop_if_next_is greater' lookup clig_equal_tail_eq_gt_gt; # ==>>
    sub equal'          lookup drop_if_next_is asciitilde'          lookup drop_if_next_is equal'   lookup clig_equal_tail_tilde_equal; # =~=
    sub equal'          lookup drop_if_next_is equal'               lookup drop_if_next_is [equal greater]' lookup clig_equal_tail_equal_greater; # ===  ==>
    sub equal'          lookup drop_if_next_is slash'               lookup drop_if_next_is equal'   lookup clig_equal_tail_eq_le_gt; #   =/=
    sub equal'          lookup drop_if_next_is less'                lookup drop_if_next_is less'    lookup clig_equal_tail_eq_le_gt; #   =<<
    sub equal'          lookup drop_if_next_is greater'             lookup drop_if_next_is equal'   lookup clig_equal_tail_greater_equal; #  =>=
    sub equal'          lookup drop_if_next_is less'                lookup drop_if_next_is equal'   lookup clig_equal_tail_less_equal; #  =<=
    sub equal'          lookup drop_if_next_is @equal_heads'        lookup clig_equal_tails;        #  == => =~ =<
} clig_equal;

lookup clig_asciitilde {
    sub asciitilde'     lookup drop_if_next_is asciitilde'          lookup drop_if_next_is greater' lookup clig_asciitilde_tail_gt; #  ~~>
    sub asciitilde'     lookup drop_if_next_is greater'             lookup drop_if_next_is greater' lookup clig_asciitilde_tail_gt_gt; #  ~>>
    sub asciitilde'     lookup drop_if_next_is @asciitilde_heads'   lookup clig_asciitilde_tails;   #  ~= ~>
} clig_asciitilde;

lookup clig_underscore {
    sub underscore'     lookup drop_if_next_is bar'          lookup drop_if_next_is underscore' lookup clig_underscore_tail_bar_underscore; # _|_
} clig_underscore;

######################################################################################################

lookup clig_BUG { sub bracketright by BUG;} clig_BUG;
lookup clig_DEBUG { sub bracketright by DEBUG;} clig_DEBUG;
lookup clig_ERR { sub bracketright by ERR;} clig_ERR;
lookup clig_ERROR { sub bracketright by ERROR;} clig_ERROR;
lookup clig_FATAL { sub bracketright by FATAL;} clig_FATAL;
lookup clig_FIXME { sub bracketright by FIXME;} clig_FIXME;
lookup clig_HACK { sub bracketright by HACK;} clig_HACK;
lookup clig_INFO { sub bracketright by INFO;} clig_INFO;
lookup clig_MARK { sub bracketright by MARK_;} clig_MARK;
lookup clig_NOTE { sub bracketright by NOTE;} clig_NOTE;
lookup clig_TODO { sub bracketright by TODO;} clig_TODO;
lookup clig_TRACE { sub bracketright by TRACE;} clig_TRACE;
lookup clig_WARN { sub bracketright by WARN;} clig_WARN;
lookup clig_WARNING { sub bracketright by WARNING;} clig_WARNING;

lookup clig_slash_BUG { sub [G g] by slash_slash_space_BUG;} clig_slash_BUG;
lookup clig_slash_DEBUG { sub [G g] by slash_slash_space_DEBUG;} clig_slash_DEBUG;
lookup clig_slash_ERR { sub [R r] by slash_slash_space_ERR;} clig_slash_ERR;
lookup clig_slash_ERROR { sub [R r] by slash_slash_space_ERROR;} clig_slash_ERROR;
lookup clig_slash_FATAL { sub [L l] by slash_slash_space_FATAL;} clig_slash_FATAL;
lookup clig_slash_FIXME { sub [E e] by slash_slash_space_FIXME;} clig_slash_FIXME;
lookup clig_slash_HACK { sub [K k] by slash_slash_space_HACK;} clig_slash_HACK;
lookup clig_slash_INFO { sub [O o] by slash_slash_space_INFO;} clig_slash_INFO;
lookup clig_slash_MARK { sub [K k] by slash_slash_space_MARK;} clig_slash_MARK;
lookup clig_slash_NOTE { sub [E e] by slash_slash_space_NOTE;} clig_slash_NOTE;
lookup clig_slash_TODO { sub [O o] by slash_slash_space_TODO;} clig_slash_TODO;
lookup clig_slash_TRACE { sub [E e] by slash_slash_space_TRACE;} clig_slash_TRACE;
lookup clig_slash_WARN { sub [N n] by slash_slash_space_WARN;} clig_slash_WARN;
lookup clig_slash_WARNING { sub [G g] by slash_slash_space_WARNING;} clig_slash_WARNING;

lookup clig_numbersign_BUG { sub [G g] by numbersign_space_BUG;} clig_numbersign_BUG;
lookup clig_numbersign_DEBUG { sub [G g] by numbersign_space_DEBUG;} clig_numbersign_DEBUG;
lookup clig_numbersign_ERR { sub [R r] by numbersign_space_ERR;} clig_numbersign_ERR;
lookup clig_numbersign_ERROR { sub [R r] by numbersign_space_ERROR;} clig_numbersign_ERROR;
lookup clig_numbersign_FATAL { sub [L l] by numbersign_space_FATAL;} clig_numbersign_FATAL;
lookup clig_numbersign_FIXME { sub [E e] by numbersign_space_FIXME;} clig_numbersign_FIXME;
lookup clig_numbersign_HACK { sub [K k] by numbersign_space_HACK;} clig_numbersign_HACK;
lookup clig_numbersign_INFO { sub [O o] by numbersign_space_INFO;} clig_numbersign_INFO;
lookup clig_numbersign_MARK { sub [K k] by numbersign_space_MARK;} clig_numbersign_MARK;
lookup clig_numbersign_NOTE { sub [E e] by numbersign_space_NOTE;} clig_numbersign_NOTE;
lookup clig_numbersign_TODO { sub [O o] by numbersign_space_TODO;} clig_numbersign_TODO;
lookup clig_numbersign_TRACE { sub [E e] by numbersign_space_TRACE;} clig_numbersign_TRACE;
lookup clig_numbersign_WARN { sub [N n] by numbersign_space_WARN;} clig_numbersign_WARN;
lookup clig_numbersign_WARNING { sub [G g] by numbersign_space_WARNING;} clig_numbersign_WARNING;


lookup next { sub [bracketleft A B C D E F G H I K L M N O R T U W X a b c d e f g h i k l m n o r t u w x slash numbersign space bracketright] by v00; } next;

lookup clig_tags {
ignore sub slash slash;
    sub bracketleft' lookup next [B b]' lookup next [U u]' lookup next [G g]' lookup next bracketright' lookup clig_BUG;
    sub bracketleft' lookup next [D d]' lookup next [E e]' lookup next [B b]' lookup next [U u]' lookup next [G g]' lookup next bracketright' lookup clig_DEBUG;
    sub bracketleft' lookup next [E e]' lookup next [R r]' lookup next [R r]' lookup next [O o]' lookup next [R r]' lookup next bracketright' lookup clig_ERROR;
    sub bracketleft' lookup next [E e]' lookup next [R r]' lookup next [R r]' lookup next bracketright' lookup clig_ERR;
    sub bracketleft' lookup next [F f]' lookup next [A a]' lookup next [T t]' lookup next [A a]' lookup next [L l]' lookup next bracketright' lookup clig_FATAL;
    sub bracketleft' lookup next [F f]' lookup next [I i]' lookup next [X x]' lookup next [M m]' lookup next [E e]' lookup next bracketright' lookup clig_FIXME;
    sub bracketleft' lookup next [H h]' lookup next [A a]' lookup next [C c]' lookup next [K k]' lookup next bracketright' lookup clig_HACK;
    sub bracketleft' lookup next [I i]' lookup next [N n]' lookup next [F f]' lookup next [O o]' lookup next bracketright' lookup clig_INFO;
    sub bracketleft' lookup next [M m]' lookup next [A a]' lookup next [R r]' lookup next [K k]' lookup next bracketright' lookup clig_MARK;
    sub bracketleft' lookup next [N n]' lookup next [O o]' lookup next [T t]' lookup next [E e]' lookup next bracketright' lookup clig_NOTE;
    sub bracketleft' lookup next [T t]' lookup next [O o]' lookup next [D d]' lookup next [O o]' lookup next bracketright' lookup clig_TODO;
    sub bracketleft' lookup next [T t]' lookup next [R r]' lookup next [A a]' lookup next [C c]' lookup next [E e]' lookup next bracketright' lookup clig_TRACE;
    sub bracketleft' lookup next [W w]' lookup next [A a]' lookup next [R r]' lookup next [N n]' lookup next bracketright' lookup clig_WARN;
    sub bracketleft' lookup next [W w]' lookup next [A a]' lookup next [R r]' lookup next [N n]' lookup next [I i]' lookup next [N n]' lookup next [G g]' lookup next bracketright' lookup clig_WARNING;

    sub slash' lookup next slash' lookup next space' lookup next [B b]' lookup next [U u]' lookup next [G g]' lookup clig_slash_BUG;
    sub slash' lookup next slash' lookup next space' lookup next [D d]' lookup next [E e]' lookup next [B b]' lookup next [U u]' lookup next [G g]' lookup clig_slash_DEBUG;
    sub slash' lookup next slash' lookup next space' lookup next [E e]' lookup next [R r]' lookup next [R r]' lookup next [O o]' lookup next [R r]' lookup clig_slash_ERROR;
    sub slash' lookup next slash' lookup next space' lookup next [E e]' lookup next [R r]' lookup next [R r]' lookup clig_slash_ERR;
    sub slash' lookup next slash' lookup next space' lookup next [F f]' lookup next [A a]' lookup next [T t]' lookup next [A a]' lookup next [L l]' lookup clig_slash_FATAL;
    sub slash' lookup next slash' lookup next space' lookup next [F f]' lookup next [I i]' lookup next [X x]' lookup next [M m]' lookup next [E e]' lookup clig_slash_FIXME;
    sub slash' lookup next slash' lookup next space' lookup next [H h]' lookup next [A a]' lookup next [C c]' lookup next [K k]' lookup clig_slash_HACK;
    sub slash' lookup next slash' lookup next space' lookup next [I i]' lookup next [N n]' lookup next [F f]' lookup next [O o]' lookup clig_slash_INFO;
    sub slash' lookup next slash' lookup next space' lookup next [M m]' lookup next [A a]' lookup next [R r]' lookup next [K k]' lookup clig_slash_MARK;
    sub slash' lookup next slash' lookup next space' lookup next [N n]' lookup next [O o]' lookup next [T t]' lookup next [E e]' lookup clig_slash_NOTE;
    sub slash' lookup next slash' lookup next space' lookup next [T t]' lookup next [O o]' lookup next [D d]' lookup next [O o]' lookup clig_slash_TODO;
    sub slash' lookup next slash' lookup next space' lookup next [T t]' lookup next [R r]' lookup next [A a]' lookup next [C c]' lookup next [E e]' lookup clig_slash_TRACE;
    sub slash' lookup next slash' lookup next space' lookup next [W w]' lookup next [A a]' lookup next [R r]' lookup next [N n]' lookup clig_slash_WARN;
    sub slash' lookup next slash' lookup next space' lookup next [W w]' lookup next [A a]' lookup next [R r]' lookup next [N n]' lookup next [I i]' lookup next [N n]' lookup next [G g]' lookup clig_slash_WARNING;

    sub numbersign' lookup next space' lookup next [B b]' lookup next [U u]' lookup next [G g]' lookup clig_numbersign_BUG;
    sub numbersign' lookup next space' lookup next [D d]' lookup next [E e]' lookup next [B b]' lookup next [U u]' lookup next [G g]' lookup clig_numbersign_DEBUG;
    sub numbersign' lookup next space' lookup next [E e]' lookup next [R r]' lookup next [R r]' lookup next [O o]' lookup next [R r]' lookup clig_numbersign_ERROR;
    sub numbersign' lookup next space' lookup next [E e]' lookup next [R r]' lookup next [R r]' lookup clig_numbersign_ERR;
    sub numbersign' lookup next space' lookup next [F f]' lookup next [A a]' lookup next [T t]' lookup next [A a]' lookup next [L l]' lookup clig_numbersign_FATAL;
    sub numbersign' lookup next space' lookup next [F f]' lookup next [I i]' lookup next [X x]' lookup next [M m]' lookup next [E e]' lookup clig_numbersign_FIXME;
    sub numbersign' lookup next space' lookup next [H h]' lookup next [A a]' lookup next [C c]' lookup next [K k]' lookup clig_numbersign_HACK;
    sub numbersign' lookup next space' lookup next [I i]' lookup next [N n]' lookup next [F f]' lookup next [O o]' lookup clig_numbersign_INFO;
    sub numbersign' lookup next space' lookup next [M m]' lookup next [A a]' lookup next [R r]' lookup next [K k]' lookup clig_numbersign_MARK;
    sub numbersign' lookup next space' lookup next [N n]' lookup next [O o]' lookup next [T t]' lookup next [E e]' lookup clig_numbersign_NOTE;
    sub numbersign' lookup next space' lookup next [T t]' lookup next [O o]' lookup next [D d]' lookup next [O o]' lookup clig_numbersign_TODO;
    sub numbersign' lookup next space' lookup next [T t]' lookup next [R r]' lookup next [A a]' lookup next [C c]' lookup next [E e]' lookup clig_numbersign_TRACE;
    sub numbersign' lookup next space' lookup next [W w]' lookup next [A a]' lookup next [R r]' lookup next [N n]' lookup clig_numbersign_WARN;
    sub numbersign' lookup next space' lookup next [W w]' lookup next [A a]' lookup next [R r]' lookup next [N n]' lookup next [I i]' lookup next [N n]' lookup next [G g]' lookup clig_numbersign_WARNING;
} clig_tags;



lookup clig_cleanup {
    sub v00 @hyphen_doubles' @hyphen_triples by v00;
    sub v00 @less_doubles' @less_triples by v00;
    sub v00 [slash_slash slash_equal slash_asterisk]' [slash_slash_slash slash_equal_equal slash_asterisk_asterisk] by v00; # trailing substitutions for clig_slash
} clig_cleanup;



######################################################################################################

lookup liga_arab_1 {
    lookupflag IgnoreMarks RightToLeft;
    sub Alef Fathatan by AlefFathatan.liga;
    sub Thal AlefSuperscript by AlefMaksuraThal.liga;
    sub Reh AlefSuperscript by AlefMaksuraReh.liga;
    sub Noon AlefMaksura.fina by NoonAlefMakFina.liga;
    sub Noon Yeh.fina by NoonYehFina.liga;
    sub AlefMaksura AlefSuperscript by AlefMaksuraAlef.liga;
    sub Shadda Dammatan by ShaddaDammatan;
    sub Shadda Kastratan by ShaddaKastratan;
    sub Shadda Fatha by ShaddaFatha;
    sub Shadda Damma by ShaddaDamma;
    sub Shadda Kasra by ShaddaKasra;
    sub Shadda AlefSuperscript by ShaddaAlefSuper;
    sub Alef.fina Fathatan by AlefFinaFathatan.liga;
    sub Lam.init Lam.medi by LamLam.init;
} liga_arab_1;

lookup kern_keywords useExtension {
   ignore pos [@upper @lower @digit] @lower';

   # java:
   pos a' b' <60 0 0 0> s' <60 0 0 0> t' <30 0 0 0> r' <30 0 0 0> a c t;    # abstract
   pos a' s' <40 0 0 0> s' <30 0 0 0> e' <50 0 0 0> r' <70 0 0 0> t;        # assert
   pos b' o' <40 0 0 0> o' <70 0 0 0> l' e' <-70 0 0 0> a' <-40 0 0 0> n;   # boolean
   pos e' x' t' e' <-50 0 0 0> n' <-30 0 0 0> d s;                          # extends
   pos f' i' n' <10 0 0 0> a' <120 0 0 0> l' <120 0 0 0> l' <50 0 0 0> y;   # finally
   pos f' i' <-50 0 0 0> n' <-60 0 0 0> a l;                                # final
   pos i' m' p' <80 0 0 0> l' e' <-80 0 0 0> m' <-60 0 0 0> e' <-30 0 0 0> n t s; # implements
   pos i' m' p' <70 0 0 0> o' <90 0 0 0> r' <50 0 0 0> t;                   # import
   pos i' n' s' t' <-30 0 0 0> a' <-40 0 0 0> n' c' e' <-30 0 0 0> o f;     # instanceof
   pos n' a' <70 0 0 0> t' <70 0 0 0> i' <20 0 0 0> v' <-40 0 0 0> e;       # native
   pos p' a' c' <-20 0 0 0> k' <-45 0 0 0> a' <-50 0 0 0> g' <-30 0 0 0> e; # package
   pos s' y' n' <20 0 0 0> c' h' r' o' <-40 0 0 0> n' i' z' <-40 0 0 0> e' <-20 0 0 0> d; # synchronized
   pos s' t' r' i' <-60 0 0 0> c' <-120 0 0 0> t' <-80 0 0 0> f' <-70 0 0 0> p; # strictfp
   pos t' r' a' <-40 0 0 0> n' s' i' <-30 0 0 0> e' <-90 0 0 0> n t;        # transient

   # ansi c:
   # auto       +break    case     +char   const      +continue
   # +default   do        +double  +else   +enum      extern
   # +float     for       +goto    if      int        +long
   # +register  +return   +short   +signed +sizeof    static
   # struct     +switch   typedef  +union  +unsigned  +void
   # +volatile  +while
   pos b' r' <30 0 0 0> e' <-40 0 0 0> a' <-10 0 0 0> k;                       # break
   pos c' h' a' <40 0 0 0> r;                                                  # char
   pos c' o' n' <50 0 0 0> t' <60 0 0 0> i' n' <-50 0 0 0> u' <-30 0 0 0> e;   # continue
   pos d' e' <50 0 0 0> f' a' <-20 0 0 0> u' <40 0 0 0> l' <80 0 0 0> t;       # default
   pos d' o' u' b' <120 0 0 0> l' <70 0 0 0> e;                                # double
   pos e' l' s' <-40 0 0 0> e;                                                 # else
   pos e' n' <-20 0 0 0> u' <-40 0 0 0> m;                                     # enum
   pos f' l' <-10 0 0 0> o' <-60 0 0 0> a t;                                   # float
   pos g' o' <70 0 0 0> t' <50 0 0 0> o;                                       # goto
   pos l' o' <-80 0 0 0> n' <-40 0 0 0> g;                                     # long
   pos r' e' <-30 0 0 0> g' i' <70 0 0 0> s' <20 0 0 0> t e r;                 # register
   pos r' e' <-20 0 0 0> t' <-40 0 0 0> u' <-20 0 0 0> r n;                    # return
   pos s' h' <30 0 0 0> o' <50 0 0 0> r' <30 0 0 0> t;                         # short
   pos s' i' <-40 0 0 0> g' <-70 0 0 0> n e d;                                 # signed
   pos s' i' <-30 0 0 0> z' <-90 0 0 0> e' <-60 0 0 0> o f;                    # sizeof
   pos s' w' <60 0 0 0> i' <60 0 0 0> t' <-30 0 0 0> c' <-50 0 0 0> h;         # switch
   pos u' n' <50 0 0 0> i' o' <-60 0 0 0> n;                                   # union
   pos u' n' <20 0 0 0> s i g n e d;                                           # unsigned
   pos v' o' <60 0 0 0> i' <40 0 0 0> d;                                       # void
   pos v' o' <60 0 0 0> l' a' t' <30 0 0 0> i' <60 0 0 0> l' <50 0 0 0> e;     # volatile
   pos w' h' <120 0 0 0> i' <130 0 0 0> l' <80 0 0 0> e;                       # while

   # c++, all of ansi c plus:
   # +asm               +bool           +catch      class              const_cast
   # +delete            dynamic_cast    explicit    false              +friend
   # inline             +mutable        namespace   new                operator
   # +private           +protected      +public     reinterpret_cast   static_cast
   # +template          +this           +throw      +true              try
   # +typeid            typename        +virtual    +using             wchar_t
   pos a' s' <-30 0 0 0> m;                                                 # asm
   pos b' o' <40 0 0 0> o' <70 0 0 0> l;                                    # bool
   pos c' a' <60 0 0 0> t' <40 0 0 0> c' <-40 0 0 0> h;                     # catch
   pos d' e' <50 0 0 0> l' e' <-40 0 0 0> t' <-30 0 0 0> e;                 # delete
   pos f' r' i' <-60 0 0 0> e' <-120 0 0 0> n' <-60 0 0 0> d;               # friend
   pos m' u' <20 0 0 0> t' a' b' <90 0 0 0> l' <50 0 0 0> e;                # mutable
   pos p' r' <30 0 0 0> i' <-30 0 0 0> v' <-70 0 0 0> a t e;                # private
   pos p' r' <60 0 0 0> o' <30 0 0 0> t' e' c' t' e' <-40 0 0 0> d;         # protected
   pos p' u' <80 0 0 0> b' <190 0 0 0> l' <150 0 0 0> i' <90 0 0 0> c;      # public
   pos t' e' m' <20 0 0 0> p' <140 0 0 0> l' <80 0 0 0> a' <30 0 0 0> t e;  # template
   pos t' h' <90 0 0 0> i' <90 0 0 0> s;                                    # this
   pos t' h' <50 0 0 0> r' <50 0 0 0> o' <-40 0 0 0> w;                     # throw
   pos t' r' <-10 0 0 0> u' <-30 0 0 0> e;                                  # true
   pos t' y' p' <40 0 0 0> e' <100 0 0 0> i' <70 0 0 0> d;                  # typeid
   pos u' s' i' <-40 0 0 0> n' <-60 0 0 0> g;                               # using
   pos v' i' r' <-80 0 0 0> t' <-80 0 0 0> u' <-50 0 0 0> a' <20 0 0 0> l;  # virtual

} kern_keywords;




lookup calt_boxdrawings {
   pos @boxdrawings @arrowsandco' <0 162 0 0>;
   pos @arrowsandco' @boxdrawings <0 162 0 0>;
} calt_boxdrawings;

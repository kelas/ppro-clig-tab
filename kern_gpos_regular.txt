lookup ker {
   pos a s' <-30 0 0 0> m;                                 # asm
   pos a b' <60 0 0 0> s' <60 0 0 0> t' <30 0 0 0> r' <30 0 0 0> a c t;            # abstract
   pos a s' <40 0 0 0> s' <30 0 0 0> e' <50 0 0 0> r' <70 0 0 0> t;                # assert
   pos b o' <40 0 0 0> o' <70 0 0 0> l;                            # bool
   pos b r' <30 0 0 0> e' <-40 0 0 0> a' <-10 0 0 0> k;                    # break
   pos c a' <60 0 0 0> t' <40 0 0 0> c' <-40 0 0 0> h;                     # catch
   pos c h a' <40 0 0 0> r;                                # char

#   pos c o' <30 0 0 0> n' <50 0 0 0> t' <60 0 0 0> i n' <-50 0 0 0> u' <-30 0 0 0> e;      # continue
#   pos d e' <50 0 0 0> f a' <-20 0 0 0> u' <40 0 0 0> l' <80 0 0 0> t;             # default
#   pos d e' <50 0 0 0> l e' <-40 0 0 0> t' <-30 0 0 0> e;                  # delete
   pos d o u b' <120 0 0 0> l' <70 0 0 0> e;                       # double
   pos e n' <-20 0 0 0> u' <-40 0 0 0> m;                          # enum
   pos e l s' <-40 0 0 0> e;                               # else
   pos e x t e' <-50 0 0 0> n' <-30 0 0 0> d s;                    # extends
   pos f i n' <10 0 0 0> a' <120 0 0 0> l' <120 0 0 0> l' <50 0 0 0> y;            # finally
   pos f i' <-50 0 0 0> n' <-60 0 0 0> a l;                        # final
   pos f l' <-10 0 0 0> o' <-60 0 0 0> a t;                        # float
   pos f r i' <-60 0 0 0> e' <-120 0 0 0> n' <-60 0 0 0> d;                # friend
   pos g o' <70 0 0 0> t' <50 0 0 0> o;                            # goto
#   pos i m p' <80 0 0 0> l e' <-80 0 0 0> m' <-60 0 0 0> e' <-30 0 0 0> n t s;     # implements
   pos i m p' <70 0 0 0> o' <90 0 0 0> r' <50 0 0 0> t;                    # import
#   pos i n s t' <-30 0 0 0> a' <-40 0 0 0> n c e' <-30 0 0 0> o f;         # instanceof
   pos l e' <-70 0 0 0> a' <-40 0 0 0> n;                          # (boo)lean
   pos l o' <-80 0 0 0> n' <-40 0 0 0> g;                          # long
#   pos m u' <20 0 0 0> t a b' <90 0 0 0> l' <50 0 0 0> e;                  # mutable
   pos n a' <70 0 0 0> t' <70 0 0 0> i' <20 0 0 0> v' <-40 0 0 0> e;               # native
   pos p a' <30 0 0 0> c' <-20 0 0 0> k' <-45 0 0 0> a' <-50 0 0 0> g' <-30 0 0 0> e;      # package
   pos p r' <30 0 0 0> i' <-30 0 0 0> v' <-70 0 0 0> a t e;                # private
#   pos p r' <60 0 0 0> o' <30 0 0 0> t e c t e' <-40 0 0 0> d;             # protected
   pos p u' <80 0 0 0> b' <190 0 0 0> l' <150 0 0 0> i' <90 0 0 0> c;              # public
#   pos r e' <-30 0 0 0> g i' <70 0 0 0> s' <20 0 0 0> t e r;               # register
   pos r e' <-20 0 0 0> t' <-40 0 0 0> u' <-20 0 0 0> r n;                 # return
   pos s h' <30 0 0 0> o' <50 0 0 0> r' <30 0 0 0> t;                      # short
   pos s i' <-40 0 0 0> g' <-70 0 0 0> n e d;                      # signed
#   pos s y n' <20 0 0 0> c h r o' <-40 0 0 0> n i z' <-40 0 0 0> e' <-20 0 0 0> d; # synchronized
   pos s i' <-30 0 0 0> z' <-90 0 0 0> e' <-60 0 0 0> o f;                 # sizeof
   pos s t r i' <-60 0 0 0> c' <-120 0 0 0> t' <-80 0 0 0> f' <-70 0 0 0> p;        # strictfp
   pos s w' <60 0 0 0> i' <60 0 0 0> t' <-30 0 0 0> c' <-50 0 0 0> h;              # switch
   pos t e' <-40 0 0 0> m' <20 0 0 0> p' <140 0 0 0> l' <80 0 0 0> a' <30 0 0 0> t e;      # template
   pos t h' <90 0 0 0> i' <90 0 0 0> s;                            # this
   pos t h' <50 0 0 0> r' <50 0 0 0> o' <-40 0 0 0> w;                     # throw
#   pos t r a' <-40 0 0 0> n s i' <-30 0 0 0> e' <-90 0 0 0> n t;           # transient
   pos t r' <-10 0 0 0> u' <-30 0 0 0> e;                          # true
   pos t y p' <40 0 0 0> e' <100 0 0 0> i' <70 0 0 0> d;                   # typeid
#   pos u n' <50 0 0 0> i o' <-60 0 0 0> n;                         # union
   pos u n' <20 0 0 0> s i g n e d;                        # unsigned
   pos u s i' <-40 0 0 0> n' <-60 0 0 0> g;                        # using
   pos v i r' <-80 0 0 0> t' <-80 0 0 0> u' <-50 0 0 0> a' <20 0 0 0> l;           # virtual
   pos v o' <60 0 0 0> i' <40 0 0 0> d;                            # void
#   pos v o' <60 0 0 0> l a t' <30 0 0 0> i' <60 0 0 0> l' <50 0 0 0> e;            # volatile
   pos w h' <120 0 0 0> i' <130 0 0 0> l' <80 0 0 0> e;                    # while
} ker;
